name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v6
        with:
          context: ./src # Confirme que Dockerfile, requirements.txt, entrypoint.sh estão dentro de 'src'
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  sonar-analysis: # Job dedicado à análise do SonarQube
    needs: CI # Depende do job CI para garantir que a imagem foi construída
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      # NOVO STEP: Iniciar SonarQube Temporário (inclui criação da rede agora)
      - name: Iniciar SonarQube Temporário no Servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: | # Usando | para scripts multi-linha
            echo "DEBUG: Iniciando SonarQube temporario no servidor..."
            # Limpeza inicial de contêineres e redes antigas do SonarQube
            docker stop sonarqube || true
            docker rm sonarqube || true
            
            # CRIAÇÃO DA REDE E ESPERA ATÉ ESTAR PRONTA (NOVA LÓGICA DE ESPERA)
            docker network rm rede-do-sonar || true # Tenta remover (ignora erro se não existir)
            docker network create rede-do-sonar # Cria a rede
            
            # LOOP DE ESPERA PARA A REDE FICAR PRONTA (CRÍTICO)
            echo "DEBUG: Aguardando a rede 'rede-do-sonar' estar totalmente pronta..."
            timeout 60 bash -c 'until docker network inspect rede-do-sonar &>/dev/null; do echo "DEBUG: Rede nao esta pronta ainda. Tentando novamente em 2 segundos..."; sleep 2; done' || { echo "ERRO: A rede 'rede-do-sonar' nao ficou pronta no tempo esperado."; exit 1; }
            echo "DEBUG: Rede 'rede-do-sonar' esta pronta!"

            # Iniciar o SonarQube Server TEMPORARIAMENTE
            docker run -d --name sonarqube --network rede-do-sonar -p 8215:9000 sonarqube:9.9-community

            echo "DEBUG: Aguardando o servidor SonarQube ficar disponível na porta 8215..."
            # Esperar o SonarQube ficar disponível (com timeout)
            timeout 300 bash -c 'until curl -s http://localhost:8215/api/system/status | grep -q "\"status\":\"UP\""; do echo "DEBUG: SonarQube nao esta pronto ainda. Tentando novamente em 10 segundos..."; sleep 10; done' || { echo "ERRO: SonarQube nao subiu no tempo esperado. Verifique os logs do docker no servidor."; exit 1; }
            echo "DEBUG: Servidor SonarQube esta pronto!"
            sleep 30 # Dar um tempo extra para SonarQube inicializar totalmente seus serviços internos

      # Passo 3: Executar a Análise com SonarScanner no runner do GitHub Actions
      - name: Executar Análise SonarQube
        uses: SonarSource/sonarcloud-github-action@v2.2.0 # Usando a ação oficial para o scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Secret com seu token do SonarQube
        with:
          projectBaseDir: ./src # Ação deve escanear o código fonte dentro da pasta 'src'
          args: >- # Usando '>-' para passar argumentos para o scanner, garantindo que sejam interpretados como uma única linha
            -Dsonar.projectKey=fake-shop-app # Chave do projeto no SonarQube
            -Dsonar.host.url=http://${{ secrets.SERVER_IP }}:8215 # Endereço do SonarQube temporário
            -Dsonar.sources=. # O scanner vai escanear o diretório base do projectBaseDir
            -Dsonar.python.version=3.11 # Versão do Python do seu projeto
            -Dsonar.python.file.suffixes=.py # Sufixos de arquivos Python para análise
            -Dsonar.qualitygate.wait=true # Fazer a pipeline falhar se o Quality Gate não for aprovado

      # Passo 4: Finalizar e Remover o SonarQube temporário no servidor remoto
      - name: Finalizar e Remover SonarQube Temporário
        if: always() # Garante que este step seja executado mesmo se a análise falhar
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: | # Usando | para scripts multi-linha
            echo "DEBUG: Finalizando e removendo containers SonarQube temporarios...";
            docker stop sonarqube || true;
            docker rm sonarqube || true;
            docker network rm rede-do-sonar || true; # Remover rede
            echo "DEBUG: SonarQube temporario finalizado e removido.";

  deploy: # Job de deploy (só executa se a análise do SonarQube passar)
    needs: sonar-analysis # Depende do job de análise do SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: | # Usando | para scripts multi-linha
            echo "Iniciando deploy da aplicação..."
            docker pull sheila421/fake-shop-app:latest
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true
            docker network rm rede-da-sheila || true
            docker network create rede-da-sheila || true
            docker volume create fake-shop-db-data || true

            # Inicia o contêiner do banco de dados (todo em uma linha Bash)
            docker run -d --name fake-shop-db --network rede-da-sheila -e POSTGRES_USER=ecommerce -e POSTGRES_PASSWORD=Pg1234 -e POSTGRES_DB=ecommerce -p 8214:5432 -v fake-shop-db-data:/var/lib/postgresql/data postgres:15

            echo "Aguardando banco de dados..."
            # Loop de verificação do banco de dados (estrutura Bash em múltiplas linhas do YAML)
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "Banco não pronto ainda..."
              sleep 5
            done
            echo "Banco de dados 'fake-shop-db' está pronto!"
            sleep 20 # Dar um tempo extra para o DB inicializar completamente

            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)
            echo "DEBUG: IP interno do fake-shop-db para migração e aplicação: $DB_INTERNAL_IP"

            # Executa as migrações do banco de dados (todo em uma linha Bash)
            docker run --rm --network rede-da-sheila --env-file /home/aluno/sheila_alves/.env -e FLASK_APP=index.py -e DB_HOST="${DB_INTERNAL_IP}" sheila421/fake-shop-app:latest flask db upgrade
            MIGRATION_STATUS=$? # Captura o status de saída do comando anterior
            
            # Condicional para verificar o status da migração (estrutura Bash em múltiplas linhas do YAML)
            if [ $MIGRATION_STATUS -ne 0 ]; then
              echo "ERRO: Migrações do banco de dados falharam! Verifique os logs da execução do workflow para mais detalhes."
              exit $MIGRATION_STATUS
            fi

            # Inicia o contêiner da aplicação (todo em uma linha Bash)
            docker run -d --name fake-shop-app --network rede-da-sheila --env-file /home/aluno/sheila_alves/.env -e DB_HOST="${DB_INTERNAL_IP}" -p 8213:8213 sheila421/fake-shop-app:latest /app/entrypoint.sh

            sleep 5 # Dar um tempo para a aplicação iniciar
            docker exec fake-shop-app env > /tmp/app_env_vars.txt # Salva variáveis de ambiente da aplicação
            docker logs fake-shop-app > /tmp/app_logs.txt # Salva logs da aplicação

            echo "DEBUG: Logs e variáveis de ambiente salvos em /tmp/app_logs.txt e /tmp/app_env_vars.txt no servidor."
            echo "DEBUG: Acesse o servidor via SSH e use 'cat /tmp/app_env_vars.txt' e 'cat /tmp/app_logs.txt' para verificar."