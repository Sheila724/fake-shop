name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  sonar-analysis:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Iniciar SonarQube no Servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Iniciando SonarQube..."
            docker stop sonarqube || true
            docker rm sonarqube || true
            docker run -d --name sonarqube -p 9000:9000 sonarqube:9.9-community

            echo "Esperando SonarQube ficar pronto (timeout 5 min)..."
            timeout 300 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "\"status\":\"UP\""; do echo "Sonar ainda não está pronto. Aguardando..."; sleep 10; done' || { echo "SonarQube não subiu."; exit 1; }

            sleep 30

      - name: Análise de Código no SonarQube
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./src
          args: >-
            -Dsonar.projectKey=fake-shop-app
            -Dsonar.host.url=http://${{ secrets.SERVER_IP }}:9000
            -Dsonar.sources=.
            -Dsonar.python.version=3.11
            -Dsonar.python.file.suffixes=.py
            -Dsonar.qualitygate.wait=true

      - name: Encerrar SonarQube
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Encerrando SonarQube..."
            docker stop sonarqube || true
            docker rm sonarqube || true

  deploy:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Realizando deploy..."

            docker pull sheila421/fake-shop-app:latest
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true
            docker network rm rede-da-sheila || true
            docker network create rede-da-sheila || true
            docker volume create fake-shop-db-data || true

            docker run -d --name fake-shop-db --network rede-da-sheila \
              -e POSTGRES_USER=ecommerce \
              -e POSTGRES_PASSWORD=Pg1234 \
              -e POSTGRES_DB=ecommerce \
              -p 8214:5432 \
              -v fake-shop-db-data:/var/lib/postgresql/data \
              postgres:15

            echo "Esperando banco de dados..."
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "Banco não pronto ainda..."
              sleep 5
            done
            sleep 20

            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)

            docker run --rm --network rede-da-sheila --env-file /home/aluno/sheila_alves/.env \
              -e FLASK_APP=index.py \
              -e DB_HOST="${DB_INTERNAL_IP}" \
              sheila421/fake-shop-app:latest flask db upgrade

            if [ $? -ne 0 ]; then
              echo "ERRO: Migração falhou!"
              exit 1
            fi

            docker run -d --name fake-shop-app --network rede-da-sheila \
              --env-file /home/aluno/sheila_alves/.env \
              -e DB_HOST="${DB_INTERNAL_IP}" \
              -p 8213:8213 \
              sheila421/fake-shop-app:latest /app/entrypoint.sh

            echo "Deploy finalizado!"


