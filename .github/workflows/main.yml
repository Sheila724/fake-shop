name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Obtendo o Código
        uses: actions/checkout@v4.2.2

      - name: Criar token do admin via API REST
        id: get_sonar_token
        env:
          SONAR_USER: admin
          SONAR_PASS: admin
        run: |
          JQ_PATH="/home/aluno/jq"
          SONAR_TOKEN=$(ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 "curl -s -u \"$SONAR_USER:$SONAR_PASS\" -X POST 'http://localhost:8088/api/user_tokens/generate?name=ci-token' | \"$JQ_PATH\" -r .token")
          echo "::add-mask::$SONAR_TOKEN"
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV

      - name: Análise com SonarQube via SSH remoto
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 << 'EOF'
            docker run -d --name sonarqube-ci \
              -p 8088:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              -v sonarqube_data:/opt/sonarqube/data \
              -v sonarqube_logs:/opt/sonarqube/logs \
              sonarqube:8.9-community

            echo "Aguardando o SonarQube iniciar..."
            until curl -s http://localhost:8088/api/system/health | grep -q '"status":"UP"'; do
              echo "Aguardando SonarQube ficar disponível..."
              sleep 10
            done

            cd /home/aluno/sheila_alves/app || exit 1

            export SONAR_TOKEN=${{ env.SONAR_TOKEN }}

            docker run --rm \
              -e SONAR_TOKEN=$SONAR_TOKEN \
              -v "$(pwd)":/usr/src \
              -w /usr/src \
              sonarsource/sonar-scanner-cli:latest

            QUALITY_GATE_STATUS=$(curl -s -u "$SONAR_TOKEN:" "http://localhost:8088/api/qualitygates/project_status?projectKey=fake-shop-app" | jq -r '.projectStatus.status')

            if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
              echo "Falha na análise do SonarQube: QUALITY GATE = $QUALITY_GATE_STATUS"
              docker stop sonarqube-ci
              docker rm sonarqube-ci
              exit 1
            fi

            docker stop sonarqube-ci
            docker rm sonarqube-ci
          EOF

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construção e Envio da Imagem Docker
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  deploy:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull sheila421/fake-shop-app:latest
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true
            docker network rm rede-da-sheila || true
            docker network create rede-da-sheila || true
            docker volume create fake-shop-db-data || true

            docker run -d --name fake-shop-db --network rede-da-sheila \
              -e POSTGRES_USER=ecommerce \
              -e POSTGRES_PASSWORD=Pg1234 \
              -e POSTGRES_DB=ecommerce \
              -p 8214:5432 \
              -v fake-shop-db-data:/var/lib/postgresql/data \
              postgres:15

            echo "DEBUG: Aguardando o banco de dados 'fake-shop-db' ficar disponível na porta 5432..."
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "DEBUG: Banco de dados não está pronto ainda. Tentando novamente em 5 segundos..."
              sleep 5
            done
            echo "DEBUG: Banco de dados 'fake-shop-db' está pronto!"
            sleep 20

            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)
            echo "DEBUG: IP interno do fake-shop-db para migração e aplicação: $DB_INTERNAL_IP"

            docker run --rm --network rede-da-sheila \
              --env-file /home/aluno/sheila_alves/.env \
              -e FLASK_APP=index.py \
              -e DB_HOST="$DB_INTERNAL_IP" \
              sheila421/fake-shop-app:latest migrate

            MIGRATION_STATUS=$?
            if [ $MIGRATION_STATUS -ne 0 ]; then
              echo "ERRO: Migrações do banco de dados falharam! Verifique os logs da execução do workflow para mais detalhes."
              exit $MIGRATION_STATUS
            fi

            docker run -d --name fake-shop-app --network rede-da-sheila \
              --env-file /home/aluno/sheila_alves/.env \
              -e DB_HOST="$DB_INTERNAL_IP" \
              -p 8217:8217 sheila421/fake-shop-app:latest run

            sleep 5
            docker exec fake-shop-app env > /tmp/app_env_vars.txt
            docker logs fake-shop-app > /tmp/app_logs.txt
            echo "DEBUG: Logs e variáveis de ambiente salvos em /tmp/app_logs.txt e /tmp/app_env_vars.txt no servidor."





