name: CI/CD com SonarQube e Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST: http://201.23.3.86:9000
      PROJECT_KEY: fake-shop-app

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Build da imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fake-shop-app:latest .

      - name: Login no Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push da imagem para Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fake-shop-app:latest

      - name: Subir SonarQube no servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker rm -f sonarqube || true
            docker run -d --name sonarqube -p 9000:9000 sonarqube:9.9-community

      - name: Esperar SonarQube estar pronto
        run: |
          for i in {1..30}; do
            if curl -s ${{ env.SONAR_HOST }}/api/system/health | grep -q '"status":"GREEN"'; then
              echo "SonarQube está pronto!"
              exit 0
            else
              echo "Aguardando SonarQube... ($i/30)"
              sleep 10
            fi
          done
          echo "SonarQube não respondeu a tempo."
          exit 1

      - name: Criar arquivo sonar-project.properties
        run: |
          cat <<EOF > sonar-project.properties
          sonar.projectKey=${{ env.PROJECT_KEY }}
          sonar.sources=.
          sonar.host.url=${{ env.SONAR_HOST }}
          sonar.login=${{ secrets.SONAR_TOKEN }}
          sonar.qualitygate.wait=true
          sonar.python.version=3.11
          sonar.python.file.suffixes=.py
          EOF

      - name: Rodar análise com SonarScanner
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/usr/src \
            -w /usr/src \
            sonarsource/sonar-scanner-cli \
            sonar-scanner || ANALYSIS_FAILED=true

      - name: Parar SonarQube no servidor
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop sonarqube && docker rm sonarqube

      - name: Verificar resultado da análise
        run: |
          sleep 10
          ANALYSIS_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" http://201.23.3.86:9000/api/qualitygates/project_status?projectKey=fake-shop-app | jq -r '.projectStatus.status')
          echo "STATUS DA ANÁLISE: $ANALYSIS_STATUS"
          if [ "$ANALYSIS_STATUS" != "OK" ]; then
            echo "Análise reprovada. Pipeline cancelado."
            exit 1
          fi

      - name: Deploy da aplicação no servidor (após aprovação)
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker rm -f fake-shop-app || true
            docker run -d --name fake-shop-app -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/fake-shop-app:latest



