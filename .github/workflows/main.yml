name: CI-CD
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Obtendo o Codigo
        uses: actions/checkout@v4.2.2
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Construcao e Envio da Imagem Docker
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  # NOVO JOB PARA ANÁLISE DE QUALIDADE COM SONARCLOUD
  sonarcloud:
    runs-on: ubuntu-latest
    needs: CI # Este job só será executado após o job 'CI' ter sucesso
    outputs: # Define as saídas deste job para serem usadas por outros jobs
      quality_gate_status: ${{ steps.sonar_scan.outputs.quality_gate_status }} # Exporta o status do Quality Gate

    steps:
      - name: Obtendo o Codigo
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Necessário para análises de branch/PR no SonarQube

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17' # SonarScanner requer Java (versão 11 ou superior é comum)
          distribution: 'temurin' # Distribuição recomendada

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt # Assumindo requirements.txt está em src/

      - name: SonarCloud Scan
        id: sonar_scan # Adiciona um ID a este passo para poder acessar suas saídas
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Necessário para importar resultados de PRs
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Seu token SonarCloud que você criou

        with:
          args: >
            -Dsonar.projectKey=sua_organizacao_nome_do_repositorio
            -Dsonar.organization=sua_organizacao_no_sonarcloud
            -Dsonar.sources=src/ # Onde seu código-fonte Python está (ex: src/)
            # -Dsonar.tests=src/tests/ # Onde seus testes estão (opcional)
            # -Dsonar.python.version=3.11 # Versão do Python (opcional)
            # -Dsonar.python.coverage.reportPaths=coverage.xml # Se você gerar relatório de cobertura

  deploy:
    needs: [CI, sonarcloud] # O job 'deploy' agora espera que 'CI' e 'sonarcloud' tenham sucesso
    # ADICIONADO: Condição para o deploy só ocorrer se o Quality Gate do SonarCloud passar
    if: success() && needs.sonarcloud.outputs.quality_gate_status == 'PASSED'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Pull da imagem com o nome de usuário correto
            docker pull sheila421/fake-shop-app:latest

            # Comandos para parar e remover contêineres existentes (se houver)
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true

            # Força a remoção da rede antes de recriar
            docker network rm rede-da-sheila || true
            # Criação da rede (agora garantida de ser nova)
            docker network create rede-da-sheila || true

            # Execução do contêiner do banco de dados (seu próprio DB)
            # ADICIONADO: Montagem de volume para persistência de dados
            docker run -d --name fake-shop-db --network rede-da-sheila \
              -v fake-shop-db-data:/var/lib/postgresql/data \ # <--- CHAVE PARA A PERSISTÊNCIA DE DADOS
              -e POSTGRES_USER=ecommerce -e POSTGRES_PASSWORD=Pg1234 -e POSTGRES_DB=ecommerce \
              -p 8214:5432 postgres:15

            # Script de espera robusto para o banco de dados
            echo "DEBUG: Aguardando o banco de dados 'fake-shop-db' ficar disponível na porta 5432..."
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "DEBUG: Banco de dados não está pronto ainda. Tentando novamente em 5 segundos..."
              sleep 5
            done
            echo "DEBUG: Banco de dados 'fake-shop-db' está pronto!"

            # Pequeno atraso ANTES de obter o IP do contêiner para garantir que ele esteja totalmente registrado.
            sleep 20

            # OBTER O IP INTERNO DO fake-shop-db PARA A MIGRAÇÃO E APLICAÇÃO PRINCIPAL
            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)
            echo "DEBUG: IP interno do fake-shop-db para migração e aplicação: $DB_INTERNAL_IP"

            # EXECUTAR MIGRAÇÕES DO BANCO DE DADOS
            docker run --rm --network rede-da-sheila \
              --env-file /home/fiona/.env \
              -e FLASK_APP=index.py \
              -e DB_HOST=$DB_INTERNAL_IP \ # Sobrescreve DB_HOST com o IP para a migração
              sheila421/fake-shop-app:latest flask db upgrade
            MIGRATION_STATUS=$? # Captura o status de saída do comando de migração
            if [ $MIGRATION_STATUS -ne 0 ]; then
              echo "ERRO: Migrações do banco de dados falharam! Verifique os logs da execução do workflow para mais detalhes."
              exit $MIGRATION_STATUS
            fi

            # Execução do contêiner da aplicação principal
            docker run -d --name fake-shop-app --network rede-da-sheila \
              --env-file /home/fiona/.env \
              -e DB_HOST=$DB_INTERNAL_IP \ # Sobrescreve DB_HOST com o IP para a APLICAÇÃO PRINCIPAL
              -p 8213:8213 sheila421/fake-shop-app:latest /app/entrypoint.sh

            # ADICIONADO: Um pequeno atraso para dar tempo do contêiner da aplicação iniciar e poder rodar comandos de debug
            sleep 5

            # CAPTURA AS VARIÁVEIS DE AMBIENTE DENTRO DO CONTÊINER E SALVA EM ARQUIVO
            docker exec fake-shop-app env > /tmp/app_env_vars.txt
            # CAPTURA OS LOGS DO CONTÊINER E SALVA EM ARQUIVO
            docker logs fake-shop-app > /tmp/app_logs.txt

            echo "DEBUG: Logs e variáveis de ambiente salvos em /tmp/app_logs.txt e /tmp/app_env_vars.txt no servidor."
            echo "DEBUG: Acesse o servidor via SSH e use 'cat /tmp/app_env_vars.txt' e 'cat /tmp/app_logs.txt' para verificar."