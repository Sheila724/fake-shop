name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  sonar-analysis:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Iniciar SonarQube Temporário no Servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "DEBUG: Iniciando SonarQube temporario no servidor..."
            docker stop sonarqube || true
            docker rm sonarqube || true

            docker run -d --name sonarqube -p 9000:9000 sonarqube:9.9-community

            echo "DEBUG: Aguardando o servidor SonarQube ficar disponível na porta 9000..."
            timeout 300 bash -c '
              until curl -s http://localhost:9000/api/system/status | grep -q "\"status\":\"UP\""; do
                echo "DEBUG: SonarQube nao esta pronto ainda. Tentando novamente em 10 segundos...";
                sleep 10;
              done
            ' || {
              echo "ERRO: SonarQube nao subiu no tempo esperado. Verifique os logs do docker no servidor.";
              exit 1;
            }

            echo "DEBUG: Servidor SonarQube esta pronto!"
            sleep 30

      - name: Executar Análise SonarQube
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./src
          args: >-
            -Dsonar.projectKey=fake-shop-app
            -Dsonar.host.url=http://${{ secrets.SERVER_IP }}:9000
            -Dsonar.sources=.
            -Dsonar.python.version=3.11
            -Dsonar.python.file.suffixes=.py
            -Dsonar.qualitygate.wait=true

      - name: Verificar resultado do Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "DEBUG: Verificando status do Quality Gate..."
          PROJECT_KEY="fake-shop-app"
          SONAR_URL="http://${{ secrets.SERVER_IP }}:9000"
          STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_URL/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | jq -r .projectStatus.status)

          if [[ "$STATUS" != "OK" ]]; then
            echo "❌ Quality Gate falhou com status: $STATUS"
            exit 1
          else
            echo "✅ Quality Gate aprovado!"
          fi

      - name: Finalizar e Remover SonarQube Temporário
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "DEBUG: Finalizando e removendo containers SonarQube temporarios...";
            docker stop sonarqube || true;
            docker rm sonarqube || true;
            echo "DEBUG: SonarQube temporario finalizado e removido.";

  deploy:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Iniciando deploy da aplicação..."
            docker pull sheila421/fake-shop-app:latest
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true
            docker network rm rede-da-sheila || true
            docker network create rede-da-sheila || true
            docker volume create fake-shop-db-data || true

            docker run -d --name fake-shop-db --network rede-da-sheila -e POSTGRES_USER=ecommerce -e POSTGRES_PASSWORD=Pg1234 -e POSTGRES_DB=ecommerce -p 8214:5432 -v fake-shop-db-data:/var/lib/postgresql/data postgres:15

            echo "Aguardando banco de dados..."
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "Banco não pronto ainda..."
              sleep 5
            done
            echo "Banco de dados 'fake-shop-db' está pronto!"
            sleep 20

            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)
            echo "DEBUG: IP interno do fake-shop-db para migração e aplicação: $DB_INTERNAL_IP"

            docker run --rm --network rede-da-sheila --env-file /home/aluno/sheila_alves/.env -e FLASK_APP=index.py -e DB_HOST="${DB_INTERNAL_IP}" sheila421/fake-shop-app:latest flask db upgrade
            MIGRATION_STATUS=$?

            if [ $MIGRATION_STATUS -ne 0 ]; then
              echo "ERRO: Migrações do banco de dados falharam! Verifique os logs da execução do workflow para mais detalhes."
              exit $MIGRATION_STATUS
            fi

            docker run -d --name fake-shop-app --network rede-da-sheila --env-file /home/aluno/sheila_alves/.env -e DB_HOST="${DB_INTERNAL_IP}" -p 8213:8213 sheila421/fake-shop-app:latest /app/entrypoint.sh

            sleep 5
            docker exec fake-shop-app env > /tmp/app_env_vars.txt
            docker logs fake-shop-app > /tmp/app_logs.txt

            echo "DEBUG: Logs e variáveis de ambiente salvos em /tmp/app_logs.txt e /tmp/app_env_vars.txt no servidor."
