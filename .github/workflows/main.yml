name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  sonar-analysis:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Acesso remoto para rodar SonarQube temporário e análise
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker stop sonarqube || true
            docker rm sonarqube || true
            docker run -d --name sonarqube -p 9000:9000 \
              --memory="1g" \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              -e JAVA_OPTS="-Xms256m -Xmx768m" \
              sonarqube:community
            echo "Aguardando SonarQube iniciar..."
            MAX_RETRIES=15
            COUNT=0
            until curl -s http://localhost:9000/api/system/health | grep -q '"status":"GREEN"'; do
              echo "SonarQube não está pronto ainda... tentativa $COUNT"
              sleep 20
              COUNT=$((COUNT+1))
              if [ $COUNT -ge $MAX_RETRIES ]; then
                echo "Timeout aguardando SonarQube ficar pronto."
                docker logs sonarqube
                exit 1
              fi
            done
            echo "SonarQube pronto para análise."

      - name: Instala Java e Scanner
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk unzip wget jq
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner

      - name: Executar análise com SonarScanner
        run: |
          ./sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=fake-shop-app \
            -Dsonar.projectBaseDir=src \
            -Dsonar.host.url=http://201.23.3.86:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Verificar resultado da análise
        run: |
          sleep 10
          ANALYSIS_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" http://201.23.3.86:9000/api/qualitygates/project_status?projectKey=fake-shop-app | jq -r '.projectStatus.status')
          echo "STATUS DA ANÁLISE: $ANALYSIS_STATUS"
          if [ "$ANALYSIS_STATUS" != "OK" ]; then
            echo "Análise reprovada. Pipeline cancelado."
            exit 1
          fi

      - name: Parar e remover SonarQube
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker stop sonarqube
            docker rm sonarqube

  deploy:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Iniciando deploy..."
            docker pull sheila421/fake-shop-app:latest
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true
            docker network rm rede-da-sheila || true
            docker network create rede-da-sheila || true
            docker volume create fake-shop-db-data || true
            docker run -d --name fake-shop-db --network rede-da-sheila \
              -e POSTGRES_USER=ecommerce \
              -e POSTGRES_PASSWORD=Pg1234 \
              -e POSTGRES_DB=ecommerce \
              -p 8214:5432 \
              -v fake-shop-db-data:/var/lib/postgresql/data \
              postgres:15
            echo "Aguardando banco de dados..."
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "Banco não pronto ainda..."
              sleep 5
            done
            sleep 20
            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)
            docker run --rm --network rede-da-sheila \
              --env-file /home/aluno/sheila_alves/.env \
              -e FLASK_APP=index.py \
              -e DB_HOST="$DB_INTERNAL_IP" \
              sheila421/fake-shop-app:latest flask db upgrade
            docker run -d --name fake-shop-app --network rede-da-sheila \
              --env-file /home/aluno/sheila_alves/.env \
              -e DB_HOST="$DB_INTERNAL_IP" \
              -p 8217:8217 sheila421/fake-shop-app:latest /app/entrypoint.sh
