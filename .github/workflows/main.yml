name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Obtendo o Código
        uses: actions/checkout@v4.2.2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construção e Envio da Imagem Docker
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  sonar-analysis:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Executar análise SonarQube no servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker network create rede-da-sheila || true

            docker run --name sonarqube-toughts --network rede-da-sheila -d -p 8126:9000 sonarqube:lts

            echo "Aguardando inicialização do SonarQube..."
            for i in {1..30}; do
              if docker logs sonarqube-toughts 2>&1 | grep -q "SonarQube is operational"; then
                break
              fi
              sleep 10
            done

            echo "Gerando token temporário do SonarQube..."
            TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:8126/api/user_tokens/generate" -d "name=github-action-token" | grep -oP '"token":"\K[^"]+')

            if [ -z "$TOKEN" ]; then
              echo "Falha ao gerar token do SonarQube"
              docker stop sonarqube-toughts
              docker rm sonarqube-toughts
              exit 1
            fi

            echo "Token gerado com sucesso."

            docker run --rm \
              --network rede-da-sheila \
              -v "$(pwd):/usr/src" \
              -u "0:0" \
              -e SONAR_USER_HOME=/tmp/.sonar-scanner \
              sonarsource/sonar-scanner-cli \
              -Dsonar.projectKey=fake-shop-app \
              -Dsonar.projectName="Fake Shop App" \
              -Dsonar.projectVersion=1.0 \
              -Dsonar.sources=. \
              -Dsonar.sourceEncoding=UTF-8 \
              -Dsonar.host.url=http://sonarqube-toughts:9000 \
              -Dsonar.login="$TOKEN" \
              -Dsonar.qualitygate.wait=true

            docker stop sonarqube-toughts
            docker rm sonarqube-toughts

  deploy:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p /home/aluno/sheila_alves/
            echo "${{ secrets.SERVER_ENV_FILE }}" > /home/aluno/sheila_alves/.env
            chmod 600 /home/aluno/sheila_alves/.env

            docker pull sheila421/fake-shop-app:latest
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true
            docker network rm rede-da-sheila || true

            docker network create rede-da-sheila || true
            docker volume create fake-shop-db-data || true

            docker run -d --name fake-shop-db --network rede-da-sheila \
              -e POSTGRES_USER=ecommerce \
              -e POSTGRES_PASSWORD=Pg1234 \
              -e POSTGRES_DB=ecommerce \
              -p 8214:5432 \
              -v fake-shop-db-data:/var/lib/postgresql/data \
              postgres:15

            echo "DEBUG: Aguardando o banco de dados 'fake-shop-db' ficar disponível na porta 5432..."
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "DEBUG: Banco de dados não está pronto ainda. Tentando novamente em 5 segundos..."
              sleep 5
            done
            echo "DEBUG: Banco de dados 'fake-shop-db' está pronto!"
            sleep 20

            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)
            echo "DEBUG: IP interno do fake-shop-db para migração e aplicação: $DB_INTERNAL_IP"

            docker run --rm --network rede-da-sheila \
              --env-file /home/aluno/sheila_alves/.env \
              -e FLASK_APP=index.py \
              -e DB_HOST="$DB_INTERNAL_IP" \
              sheila421/fake-shop-app:latest migrate

            MIGRATION_STATUS=$?
            if [ $MIGRATION_STATUS -ne 0 ]; then
              echo "ERRO: Migrações do banco de dados falharam!"
              exit $MIGRATION_STATUS
            fi

            docker run -d --name fake-shop-app --network rede-da-sheila \
              --env-file /home/aluno/sheila_alves/.env \
              -e DB_HOST="$DB_INTERNAL_IP" \
              -p 8217:8217 sheila421/fake-shop-app:latest run

            sleep 5

            docker exec fake-shop-app env > /tmp/app_env_vars.txt
            docker logs fake-shop-app > /tmp/app_logs.txt
            echo "DEBUG: Logs e variáveis de ambiente salvos no servidor."
