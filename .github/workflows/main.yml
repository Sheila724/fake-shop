name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v6
        with:
          context: ./src # Confirme que Dockerfile, requirements.txt, entrypoint.sh estão dentro de 'src'
          push: true
          file: ./src/Dockerfile
          tags: |
            sheila421/fake-shop-app:latest
            sheila421/fake-shop-app:v${{ github.run_number }}

  sonar-analysis: # Job dedicado à análise do SonarQube
    needs: CI # Depende do job CI para garantir que a imagem foi construída
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4.2.2

      # PASSO 1: Instalar a chave SSH no runner (Necessário para o comando 'ssh' direto)
      - name: Instalar Chave SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }} # Usa a mesma chave SSH que você já tem
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors' # Placeholder, para evitar erros de known_hosts

      # PASSO 2: Iniciar SonarQube Temporário no Servidor (Usando abordagem do colega)
      - name: Iniciar SonarQube Temporário no Servidor
        # REMOVIDO: env: SERVER_IP: ${{ secrets.SERVER_IP }}
        run: | # O script abaixo roda no runner local
          echo "DEBUG: Iniciando SonarQube temporario no servidor..."
          # Comandos a serem executados no servidor remoto
          # REFERENCIA DIRETA AO SECRET AQUI: ${{ secrets.SERVER_IP }}
          ssh -o StrictHostKeyChecking=no aluno@${{ secrets.SERVER_IP }} <<EOF
            docker stop sonarqube_temp || true
            docker rm sonarqube_temp || true
            docker run -d --name sonarqube_temp -p 9000:9000 sonarqube:9.9-community
          EOF
          echo "DEBUG: SonarQube temporario iniciado. Aguardando ficar disponível..."
          # Esperar o SonarQube ficar disponível (com timeout)
          # REFERENCIA DIRETA AO SECRET AQUI: ${{ secrets.SERVER_IP }}
          timeout 300 bash -c 'until curl -s http://${{ secrets.SERVER_IP }}:9000/api/system/status | grep -q "\"status\":\"UP\""; do echo "DEBUG: SonarQube nao esta pronto ainda. Tentando novamente em 10 segundos..."; sleep 10; done' || { echo "ERRO: SonarQube nao subiu no tempo esperado. Verifique os logs do docker no servidor."; exit 1; }
          echo "DEBUG: Servidor SonarQube esta pronto!"
          sleep 30 # Dar um tempo extra para SonarQube inicializar totalmente seus serviços internos

      # PASSO 3: Executar a Análise com SonarScanner no runner do GitHub Actions
      - name: Executar Análise SonarQube
        uses: SonarSource/sonarcloud-github-action@v2.2.0 # Usando a ação oficial para o scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Secret com seu token do SonarQube
        with:
          projectBaseDir: ./src # Ação deve escanear o código fonte dentro da pasta 'src'
          args: >- # Usando '>-' para passar argumentos para o scanner
            -Dsonar.projectKey=fake-shop-app
            -Dsonar.host.url=http://${{ secrets.SERVER_IP }}:9000 # Aponta para o SonarQube temporário na porta 9000
            -Dsonar.sources=.
            -Dsonar.python.version=3.11
            -Dsonar.python.file.suffixes=.py
            -Dsonar.qualitygate.wait=true

      # PASSO 4: Finalizar e Remover o SonarQube temporário no servidor remoto
      - name: Finalizar e Remover SonarQube Temporário
        if: always() # Garante que este step seja executado mesmo se a análise falhar
        # REMOVIDO: env: SERVER_IP: ${{ secrets.SERVER_IP }}
        run: | # O script abaixo roda no runner local
          echo "DEBUG: Finalizando e removendo containers SonarQube temporarios...";
          # REFERENCIA DIRETA AO SECRET AQUI: ${{ secrets.SERVER_IP }}
          ssh -o StrictHostKeyChecking=no aluno@${{ secrets.SERVER_IP }} <<EOF
            docker stop sonarqube_temp || true
            docker rm sonarqube_temp || true
          EOF
          echo "DEBUG: SonarQube temporario finalizado e removido.";

  deploy: # Job de deploy (só executa se a análise do SonarQube passar)
    needs: sonar-analysis # Depende do job de análise do SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: | # Usando | para scripts multi-linha
            echo "Iniciando deploy da aplicação..."
            docker pull sheila421/fake-shop-app:latest
            docker stop fake-shop-app || true
            docker rm fake-shop-app || true
            docker stop fake-shop-db || true
            docker rm fake-shop-db || true
            docker network rm rede-da-sheila || true
            docker network create rede-da-sheila || true
            docker volume create fake-shop-db-data || true

            # Inicia o contêiner do banco de dados (todo em uma linha Bash)
            docker run -d --name fake-shop-db --network rede-da-sheila -e POSTGRES_USER=ecommerce -e POSTGRES_PASSWORD=Pg1234 -e POSTGRES_DB=ecommerce -p 8214:5432 -v fake-shop-db-data:/var/lib/postgresql/data postgres:15

            echo "Aguardando banco de dados..."
            # Loop de verificação do banco de dados (estrutura Bash em múltiplas linhas do YAML)
            until docker exec fake-shop-db pg_isready -h localhost -p 5432 -U ecommerce; do
              echo "Banco não pronto ainda..."
              sleep 5
            done
            echo "Banco de dados 'fake-shop-db' está pronto!"
            sleep 20 # Dar um tempo extra para o DB inicializar completamente

            DB_INTERNAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fake-shop-db)
            echo "DEBUG: IP interno do fake-shop-db para migração e aplicação: $DB_INTERNAL_IP"

            # Executa as migrações do banco de dados (todo em uma linha Bash)
            docker run --rm --network rede-da-sheila --env-file /home/aluno/sheila_alves/.env -e FLASK_APP=index.py -e DB_HOST="${DB_INTERNAL_IP}" sheila421/fake-shop-app:latest flask db upgrade
            MIGRATION_STATUS=$? # Captura o status de saída do comando anterior
            
            # Condicional para verificar o status da migração (estrutura Bash em múltiplas linhas do YAML)
            if [ $MIGRATION_STATUS -ne 0 ]; then
              echo "ERRO: Migrações do banco de dados falharam! Verifique os logs do workflow para mais detalhes."
              exit $MIGRATION_STATUS
            fi

            # Inicia o contêiner da aplicação (todo em uma linha Bash)
            docker run -d --name fake-shop-app --network rede-da-sheila --env-file /home/aluno/sheila_alves/.env -e DB_HOST="${DB_INTERNAL_IP}" -p 8213:8213 sheila421/fake-shop-app:latest /app/entrypoint.sh

            sleep 5 # Dar um tempo para a aplicação iniciar
            docker exec fake-shop-app env > /tmp/app_env_vars.txt # Salva variáveis de ambiente da aplicação
            docker logs fake-shop-app > /tmp/app_logs.txt # Salva logs da aplicação

            echo "DEBUG: Logs e variáveis de ambiente salvos em /tmp/app_logs.txt e /tmp/app_env_vars.txt no servidor."
            echo "DEBUG: Acesse o servidor via SSH e use 'cat /tmp/app_env_vars.txt' e 'cat /tmp/app_logs.txt' para verificar."



